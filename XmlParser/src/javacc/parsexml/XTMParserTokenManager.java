/* Generated By:JJTree&JavaCC: Do not edit this line. XTMParserTokenManager.java */
package javacc.parsexml;

/** Token Manager. */
public class XTMParserTokenManager implements XTMParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 18;
         if ((active0 & 0x7ffffbfc00L) != 0L)
            return 12;
         if ((active0 & 0x28L) != 0L)
            return 0;
         if ((active0 & 0x14L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active0 & 0x20L) != 0L)
            return 17;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 19);
      case 10:
         return jjStartNfaWithStates_0(0, 4, 19);
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 18);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x20000040000L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x7ffffbfc00L);
      default :
         return jjMoveNfa_0(17, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 17);
         break;
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x55548ea000L);
      case 62:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 63:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200010000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80300000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001001800L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2a008000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x880000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40400000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001011800L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400020000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100004000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000082000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x54000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1900000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000400L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800a2000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2001001800L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20040c000L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x2020010000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x3001800L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10020400L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x300004000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080082000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400808000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x808000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(5, 16);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 29);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 37);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2400000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1005800L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40c8320000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4082000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400008000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1210000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 62:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 31);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(6, 38);
         break;
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4800000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x38a000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x110000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x2400000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1a00000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 32);
         break;
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4800L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200400000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x801000400L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x9000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4800000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x2300000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(8, 25);
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x88000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400800000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1200400000L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4004000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000800L);
      case 61:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 62:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(9, 26);
         break;
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x400800000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 62:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(10, 19);
         break;
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000100000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800200000L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8400L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 120:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(11, 22);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(11, 35);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x400100000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x204000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x8400L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x200001000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(12, 14);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(12, 23);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(12, 36);
         break;
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x8400L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x400300000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(13, 15);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(13, 33);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa15_0(active0, 0x400L);
      case 61:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L);
      case 62:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(14, 34);
         break;
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000L);
      case 34:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L);
      case 49:
         return jjMoveStringLiteralDfa16_0(active0, 0x400L);
      case 61:
         return jjMoveStringLiteralDfa16_0(active0, 0x800L);
      case 99:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(15, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa17_0(active0, 0x800L);
      case 35:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L);
      case 46:
         return jjMoveStringLiteralDfa17_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
      case 104:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa18_0(active0, 0x400L);
      case 104:
         return jjMoveStringLiteralDfa18_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x300000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000L);
      case 34:
         return jjMoveStringLiteralDfa19_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000L);
      case 104:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000L);
      case 112:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000L);
      case 112:
         return jjMoveStringLiteralDfa21_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(21, 20);
         break;
      case 58:
         return jjMoveStringLiteralDfa22_0(active0, 0x800L);
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(21, 24);
         break;
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa23_0(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa24_0(active0, 0x800L);
      case 61:
         return jjMoveStringLiteralDfa24_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(24, 21);
         break;
      case 100:
         return jjMoveStringLiteralDfa25_0(active0, 0x400L);
      case 119:
         return jjMoveStringLiteralDfa25_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x400L);
      case 119:
         return jjMoveStringLiteralDfa26_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x400L);
      case 119:
         return jjMoveStringLiteralDfa27_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa28_0(active0, 0x800L);
      case 103:
         return jjMoveStringLiteralDfa28_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa29_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa29_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa30_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa30_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa31_0(active0, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa31_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
static private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa32_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa32_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
static private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa33_0(active0, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa33_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
static private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa34_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa34_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
static private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa35_0(active0, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa35_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
static private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa36_0(active0, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa36_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
static private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa37_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa37_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
static private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa38_0(active0, 0x800L);
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(37, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
static private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa39_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
static private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa40_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
static private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa41_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
static private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa42_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
static private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 120:
         return jjMoveStringLiteralDfa43_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
static private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa44_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0);
}
static private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa45_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0);
}
static private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa46_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0);
}
static private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0);
      return 46;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa47_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0);
}
static private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0);
      return 47;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa48_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(46, active0);
}
static private int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(46, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(47, active0);
      return 48;
   }
   switch(curChar)
   {
      case 118:
         return jjMoveStringLiteralDfa49_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(47, active0);
}
static private int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(47, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(48, active0);
      return 49;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa50_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(48, active0);
}
static private int jjMoveStringLiteralDfa50_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(48, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(49, active0);
      return 50;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa51_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(49, active0);
}
static private int jjMoveStringLiteralDfa51_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(49, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(50, active0);
      return 51;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa52_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(50, active0);
}
static private int jjMoveStringLiteralDfa52_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(50, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(51, active0);
      return 52;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa53_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(51, active0);
}
static private int jjMoveStringLiteralDfa53_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(51, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(52, active0);
      return 53;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa54_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(52, active0);
}
static private int jjMoveStringLiteralDfa54_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(52, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(53, active0);
      return 54;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa55_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(53, active0);
}
static private int jjMoveStringLiteralDfa55_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(53, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(54, active0);
      return 55;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa56_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(54, active0);
}
static private int jjMoveStringLiteralDfa56_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(54, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(55, active0);
      return 56;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa57_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(55, active0);
}
static private int jjMoveStringLiteralDfa57_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(55, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(56, active0);
      return 57;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa58_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(56, active0);
}
static private int jjMoveStringLiteralDfa58_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(56, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(57, active0);
      return 58;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa59_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(57, active0);
}
static private int jjMoveStringLiteralDfa59_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(57, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(58, active0);
      return 59;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa60_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(58, active0);
}
static private int jjMoveStringLiteralDfa60_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(58, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(59, active0);
      return 60;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa61_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(59, active0);
}
static private int jjMoveStringLiteralDfa61_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(59, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(60, active0);
      return 61;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(61, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(60, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xeffffffb00000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  else if ((0x2600L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  if (curChar == 10)
                     jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if ((0xeffffffb00000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  else if ((0x2600L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 13);
                  break;
               case 17:
                  if ((0xeffffffb00000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  else if ((0x2600L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 12;
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 13);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 19:
                  if ((0xeffffffb00000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  else if ((0x2600L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 1:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 13);
                  break;
               case 3:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(4, 10);
                  break;
               case 4:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 10);
                  break;
               case 5:
                  if (curChar != 62)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(6, 8);
                  break;
               case 6:
                  if (curChar != 32)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(6, 8);
                  break;
               case 7:
                  if (curChar != 10)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x2600L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0xeffffffb00000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if ((0x2600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 15:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 18:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 19:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 4:
                  jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = SimpleCharStream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 13, 14, 15, 16, 4, 10, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\74\77\170\155\154\40\166\145\162\163\151\157\156\75\42\61\56\60\42\40\145\156\143\157\144\151\156\147\75\42\125\124\106\55\70\42\77\76", 
"\74\164\157\160\151\143\115\141\160\40\170\155\154\156\163\75\42\150\164\164\160\72\57\57\167\167\167\56\164\157\160\151\143\155\141\160\163\56\157\162\147\57\170\164\155\57\42\40\166\145\162\163\151\157\156\75\42\62\56\60\42\76", "\74\164\157\160\151\143\40\151\144\75\42\164\157\160\151\143", 
"\74\57\164\157\160\151\143\76", "\74\141\163\163\157\143\151\141\164\151\157\156\76", 
"\74\57\141\163\163\157\143\151\141\164\151\157\156\76", "\74\162\157\154\145\76", "\74\57\162\157\154\145\76", "\42\57\76", 
"\74\57\164\157\160\151\143\115\141\160\76", 
"\74\163\165\142\152\145\143\164\114\157\143\141\164\157\162\40\150\162\145\146\75\42", 
"\74\163\165\142\152\145\143\164\111\144\145\156\164\151\146\151\145\162\40\150\162\145\146\75\42", "\74\151\156\163\164\141\156\143\145\117\146\76", 
"\74\57\151\156\163\164\141\156\143\145\117\146\76", 
"\74\164\157\160\151\143\122\145\146\40\150\162\145\146\75\42\43\164\157\160\151\143", "\74\166\141\162\151\141\156\164\76", "\74\57\166\141\162\151\141\156\164\76", 
"\74\166\141\154\165\145\76", "\74\57\166\141\154\165\145\76", "\74\156\141\155\145\76", 
"\74\57\156\141\155\145\76", "\74\163\143\157\160\145\76", "\74\57\163\143\157\160\145\76", 
"\74\162\145\163\157\165\162\143\145\104\141\164\141\76", "\74\57\162\145\163\157\165\162\143\145\104\141\164\141\76", 
"\74\157\143\143\165\162\162\145\156\143\145\76", "\74\57\157\143\143\165\162\162\145\156\143\145\76", "\74\164\171\160\145\76", 
"\74\57\164\171\160\145\76", null, null, "\42\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x37ffffffc01L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[17];
static private final int[] jjstateSet = new int[34];
static protected char curChar;
/** Constructor. */
public XTMParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public XTMParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 17; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
   beginLine = SimpleCharStream.getBeginLine();
   beginColumn = SimpleCharStream.getBeginColumn();
   endLine = SimpleCharStream.getEndLine();
   endColumn = SimpleCharStream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = SimpleCharStream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         SimpleCharStream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = SimpleCharStream.getEndLine();
   int error_column = SimpleCharStream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { SimpleCharStream.readChar(); SimpleCharStream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      SimpleCharStream.backup(1);
      error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
