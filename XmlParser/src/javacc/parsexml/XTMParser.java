/* Generated By:JJTree&JavaCC: Do not edit this line. XTMParser.java */
package javacc.parsexml;

import java.io.*;
import javacc.structure.*;

public class XTMParser/*@bgen(jjtree)*/implements XTMParserTreeConstants, XTMParserConstants {/*@bgen(jjtree)*/
  protected static JJTXTMParserState jjtree = new JJTXTMParserState();private static boolean verboseParser; //verbose option on/off
  // Main used for parser debug purpose
  /** Use main only for debug
	* @param args arg[0] must contain full path of xtm file
	*/
  public static void main(String args []) throws Exception
  {
        //Debug - > Always verbose
        verboseParser = true;

        //FILE STREAM
        FileInputStream in = null;
        try {
          //Need file to parse...
          if(args.length<1) throw (new Exception("Full file path missing..."));
          String fileName = args[0];

          //Pre-process the input file
          File processedFile = new File (fileName+"_reloaded.xtm");
          String cmdLine = "native2ascii -encoding utf8 " + new File(fileName) + " " + processedFile;
          Process jdkProc = null;
      try {
        jdkProc = Runtime.getRuntime().exec(cmdLine);
        jdkProc.waitFor();
          } catch (InterruptedException ie) {
            ie.printStackTrace();
          }
          System.out.println("File preprocessed.");

          in = new FileInputStream(processedFile.getPath());
          System.out.println("Now parsing " + fileName);
          new XTMParser(in);

          try {
                //START PARSING
                XTM xtm = XTMParser.start();

                //Generate LOG
                xtm.print(fileName+"-LOG.txt");
          } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
          }

        } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
        } finally {
                if (in != null)
                        in.close();
    }
  }

  // Function for library purpose
  /** Parse an XTM File into an {@link XTM} object 
	* @param fullPathFileName Must contain full path of xtm file
	* @param verboseOption Set it to TRUE if you want to print actions
	*/
  public static XTM parse(String fullPathFileName, boolean verboseOption) throws Exception
  {
        if(verboseOption) verboseParser = true; else verboseParser = false;

        FileInputStream in = null;
        XTM xtm = null;

        try {
          //Need file to parse...
          if(fullPathFileName==null || fullPathFileName.isEmpty()) throw (new Exception("Full file path missing..."));
          String fileName = fullPathFileName;

          File processedFile = new File (fileName+"_reloaded.xtm");
          String cmdLine = "native2ascii -encoding utf8 " + new File(fileName) + " " + processedFile;
          Process jdkProc = null;
      try {
        jdkProc = Runtime.getRuntime().exec(cmdLine);
        jdkProc.waitFor();
          } catch (InterruptedException ie) {
            ie.printStackTrace();
          }
          System.out.println("File preprocessed.");

          //Load file
          in = new FileInputStream(processedFile);
          System.out.println("Now parsing " + fileName);
          new XTMParser(in);

          try {
                //START PARSING
                xtm = XTMParser.start();

                //Generate LOG
                xtm.print(fileName+"-LOG.txt");

          } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
          }

        } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
        } finally {
                if (in != null)
                        in.close();
    }

    //Return XTM Structure
        return xtm;
  }

/* PARSER START POINT */
  @SuppressWarnings("unused")
static final public XTM start() throws ParseException {
 /*@bgen(jjtree) start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);XTM xtmFile;
    try {
      jj_consume_token(FILE_START);
      xtmFile = parseXTM();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("PARSING PROCESS OK");
    {if (true) return xtmFile;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public XTM parseXTM() throws ParseException {
 /*@bgen(jjtree) parseXTM */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSEXTM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);XTM x = new XTM();
        TopicMap tm = new TopicMap();
    try {
      jj_consume_token(START_TOPIC_MAP);
      parseTopicMap(tm);
      jj_consume_token(END_TOPIC_MAP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    x.setTopicMap(tm, false);
    {if (true) return x;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void parseTopicMap(TopicMap topicMap) throws ParseException {
 /*@bgen(jjtree) parseTopicMap */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICMAP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);TopicMap tm = topicMap;
        Topic topic = new Topic();
        Association association = new Association();

        String topicId;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_TOPIC:
        jj_consume_token(START_TOPIC);
        topicId = parseTopicID();
        jj_consume_token(41);
        parseTopic(topic);
        jj_consume_token(END_TOPIC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_TOPIC:
        case START_ASSOCIATION:
          parseTopicMap(tm);
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    topic.setTopicID(topicId);
        tm.putTopic(topic);
        break;
      case START_ASSOCIATION:
        jj_consume_token(START_ASSOCIATION);
        parseAssociation(association);
        jj_consume_token(END_ASSOCIATION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_TOPIC:
        case START_ASSOCIATION:
          parseTopicMap(tm);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    tm.putAssociation(association);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* TOKEN */
  static final public void parseTopic(Topic topic) throws ParseException {
 /*@bgen(jjtree) parseTopic */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPIC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Topic t = topic;
        String subjectLocator;
        String subjectIdentifier;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_SUBJECT_LOCATOR:
        jj_consume_token(START_SUBJECT_LOCATOR);
        subjectLocator = parseTopicSubjLoc();
        jj_consume_token(TAG_END);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SUBJECT_LOCATOR:
        case START_SUBJECT_IDENTIFIER:
        case START_INSTANCE_OF:
        case START_NAME:
        case START_OCCURENCE:
          parseTopic(t);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicSubjLoc found");
        t.addTopicSubjectLocator(subjectLocator);
        break;
      case START_SUBJECT_IDENTIFIER:
        jj_consume_token(START_SUBJECT_IDENTIFIER);
        subjectIdentifier = parseTopicSubjIdentif();
        jj_consume_token(TAG_END);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SUBJECT_LOCATOR:
        case START_SUBJECT_IDENTIFIER:
        case START_INSTANCE_OF:
        case START_NAME:
        case START_OCCURENCE:
          parseTopic(t);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicSubjectIdentifier found");
        t.addTopicSubjectIdentifier(subjectIdentifier);
        break;
      case START_INSTANCE_OF:
        jj_consume_token(START_INSTANCE_OF);
        parseTopicIstanceOf(t);
        jj_consume_token(END_INSTANCE_OF);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SUBJECT_LOCATOR:
        case START_SUBJECT_IDENTIFIER:
        case START_INSTANCE_OF:
        case START_NAME:
        case START_OCCURENCE:
          parseTopic(t);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        if(verboseParser) System.out.println("TopicIstanceOf found");
        break;
      case START_NAME:
        jj_consume_token(START_NAME);
        parseTopicName(t);
        jj_consume_token(END_NAME);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SUBJECT_LOCATOR:
        case START_SUBJECT_IDENTIFIER:
        case START_INSTANCE_OF:
        case START_NAME:
        case START_OCCURENCE:
          parseTopic(t);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        //OK... passo topic, oggetto manipolato per riferimento
        if(verboseParser) System.out.println("TopicName found");
        break;
      case START_OCCURENCE:
        jj_consume_token(START_OCCURENCE);
        parseTopicOccurence(t, null);
        jj_consume_token(END_OCCURENCE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SUBJECT_LOCATOR:
        case START_SUBJECT_IDENTIFIER:
        case START_INSTANCE_OF:
        case START_NAME:
        case START_OCCURENCE:
          parseTopic(t);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicOccurrence found");
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseTopicIstanceOf(Topic topic) throws ParseException {
 /*@bgen(jjtree) parseTopicIstanceOf */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICISTANCEOF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Topic t = topic;
  String idTopicRefInstanceOf;
    try {
      jj_consume_token(START_TOPIC_REF);
      idTopicRefInstanceOf = parseTopicID();
      jj_consume_token(TAG_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_TOPIC_REF:
        parseTopicIstanceOf(t);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicIstanceOf found");
    t.addTopicInstanceOf(idTopicRefInstanceOf);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseTopicName(Topic topic) throws ParseException {
 /*@bgen(jjtree) parseTopicName */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Topic t = topic;
  TopicName tn = t.getTopicName();
  if(tn == null) {
        tn = t.getNewTopicName();
  }
  String topicNameValue;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_VALUE:
        jj_consume_token(START_VALUE);
        topicNameValue = parseNameValue();
        jj_consume_token(END_VALUE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_VARIANT:
        case START_VALUE:
          parseTopicName(t);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicNameValue found");
    tn.setTopicNameValue(topicNameValue);
        break;
      case START_VARIANT:
        jj_consume_token(START_VARIANT);
        parseNameVariant(t, null);
        jj_consume_token(END_VARIANT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_VARIANT:
        case START_VALUE:
          parseTopicName(t);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        if(verboseParser) System.out.println("TopicNameVariant found");
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseNameVariant(Topic topic, TopicNameVariant tnv) throws ParseException {
 /*@bgen(jjtree) parseNameVariant */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSENAMEVARIANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Topic t = topic;
  TopicNameVariant topicNameVariant = tnv;
  if(topicNameVariant == null) {
    topicNameVariant = t.getNewTopicNameVariant(); //ritorna il riferimento
  }
  String resourceData;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_SCOPE:
        jj_consume_token(START_SCOPE);
        parseTopicNameVariantScope(topicNameVariant);
        jj_consume_token(END_SCOPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SCOPE:
        case START_RESOURCE_DATA:
          parseNameVariant(t, topicNameVariant);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

        break;
      case START_RESOURCE_DATA:
        jj_consume_token(START_RESOURCE_DATA);
        resourceData = parseTopicNameVariantResData();
        jj_consume_token(END_RESOURCE_DATA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SCOPE:
        case START_RESOURCE_DATA:
          parseNameVariant(t, topicNameVariant);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        topicNameVariant.setTopicNameVariantResourceData(resourceData);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseTopicNameVariantScope(TopicNameVariant tnv) throws ParseException {
 /*@bgen(jjtree) parseTopicNameVariantScope */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICNAMEVARIANTSCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);TopicNameVariant topicNameVariant = tnv;
  String idTopicNameVariantScope;
    try {
      jj_consume_token(START_TOPIC_REF);
      idTopicNameVariantScope = parseTopicID();
      jj_consume_token(TAG_END);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_TOPIC_REF:
        parseTopicNameVariantScope(topicNameVariant);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    topicNameVariant.addTopicNameVariantScope(idTopicNameVariantScope);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseTopicOccurence(Topic t, TopicOccurrence to) throws ParseException {
 /*@bgen(jjtree) parseTopicOccurence */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Topic topic = t;
  TopicOccurrence topicOccurence = to;
  if(topicOccurence == null) {
        topicOccurence = t.getNewTopicOccurence(); //ritorna il riferimento al nuovo topic occurence in topic
  }
  String topicType;
  String topicOccurenceScope;
  String topicOccurenceResData;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_TYPE:
        jj_consume_token(START_TYPE);
        topicType = parseTopicOccurenceType();
        jj_consume_token(END_TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SCOPE:
        case START_RESOURCE_DATA:
        case START_TYPE:
          parseTopicOccurence(topic, topicOccurence);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicOccurenceType found");
    topicOccurence.setTopicOccurenceType(topicType);
        break;
      case START_SCOPE:
        jj_consume_token(START_SCOPE);
        topicOccurenceScope = parseTopicOccurenceScope();
        jj_consume_token(END_SCOPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SCOPE:
        case START_RESOURCE_DATA:
        case START_TYPE:
          parseTopicOccurence(topic, topicOccurence);
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicOccurenceScope found");
    topicOccurence.addTopicOccurenceScope(topicOccurenceScope);
        break;
      case START_RESOURCE_DATA:
        jj_consume_token(START_RESOURCE_DATA);
        topicOccurenceResData = parseTopicOccurenceResData();
        jj_consume_token(END_RESOURCE_DATA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_SCOPE:
        case START_RESOURCE_DATA:
        case START_TYPE:
          parseTopicOccurence(topic, topicOccurence);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("TopicOccurenceResData found");
        topicOccurence.setTopicOccurenceResourceData(topicOccurenceResData);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  @SuppressWarnings("unused")
static final public String parseTopicOccurenceType() throws ParseException {
 /*@bgen(jjtree) parseTopicOccurenceType */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String idTopicRefOccurenceType;
    try {
      jj_consume_token(START_TOPIC_REF);
      idTopicRefOccurenceType = parseTopicID();
      jj_consume_token(TAG_END);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return idTopicRefOccurenceType;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public String parseTopicOccurenceScope() throws ParseException {
 /*@bgen(jjtree) parseTopicOccurenceScope */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCESCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String idTopicRefOccurenceScope;
    try {
      jj_consume_token(START_TOPIC_REF);
      idTopicRefOccurenceScope = parseTopicID();
      jj_consume_token(TAG_END);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        {if (true) return idTopicRefOccurenceScope;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* ASSOCIATION */
  static final public void parseAssociation(Association a) throws ParseException {
 /*@bgen(jjtree) parseAssociation */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Association association = a;
        AssociationRole associationRole = new AssociationRole();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_TYPE:
        jj_consume_token(START_TYPE);
        parseAssociationType(association);
        jj_consume_token(END_TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_ROLE:
        case START_TYPE:
          parseAssociation(association);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

        break;
      case START_ROLE:
        jj_consume_token(START_ROLE);
        parseAssociationRole(associationRole);
        jj_consume_token(END_ROLE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_ROLE:
        case START_TYPE:
          parseAssociation(association);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        association.addAssociationRole(associationRole);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseAssociationType(Association a) throws ParseException {
 /*@bgen(jjtree) parseAssociationType */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Association association = a;
  String idAssociationType;
    try {
      jj_consume_token(START_TOPIC_REF);
      idAssociationType = parseTopicID();
      jj_consume_token(TAG_END);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("AssociationType found");
    association.setAssociationType(idAssociationType);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseAssociationRole(AssociationRole as) throws ParseException {
 /*@bgen(jjtree) parseAssociationRole */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATIONROLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);AssociationRole associationRole = as;
  String idAssociationRoleTopicRef;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_TYPE:
        jj_consume_token(START_TYPE);
        parseAssociationRoleType(associationRole);
        jj_consume_token(END_TYPE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case START_TOPIC_REF:
        case START_TYPE:
          parseAssociationRole(associationRole);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

        break;
      case START_TOPIC_REF:
        jj_consume_token(START_TOPIC_REF);
        idAssociationRoleTopicRef = parseTopicID();
        jj_consume_token(TAG_END);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("AssociationRoleTopicRef found");
        associationRole.setAssociationRoleTopicRef(idAssociationRoleTopicRef);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void parseAssociationRoleType(AssociationRole as) throws ParseException {
 /*@bgen(jjtree) parseAssociationRoleType */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATIONROLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);AssociationRole associationRole = as;
  String idAssociationRoleType;
    try {
      jj_consume_token(START_TOPIC_REF);
      idAssociationRoleType = parseTopicID();
      jj_consume_token(TAG_END);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("AssociationRole found");
    associationRole.setAssociationRoleType(idAssociationRoleType);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* FOGLIE */
  @SuppressWarnings("unused")
static final public String parseTopicID() throws ParseException {
 /*@bgen(jjtree) parseTopicID */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token topicID;
    try {
      topicID = jj_consume_token(MULTI_EX_AL_ST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println("Found topic id = " + topicID.image);
    {if (true) return (topicID.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public String parseNameValue() throws ParseException {
 /*@bgen(jjtree) parseNameValue */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSENAMEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token nameValue;
    try {
      nameValue = jj_consume_token(MULTI_EX_AL_ST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println(" Found name value = " + nameValue.image );
    {if (true) return (nameValue.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public String parseTopicNameVariantResData() throws ParseException {
 /*@bgen(jjtree) parseTopicNameVariantResData */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICNAMEVARIANTRESDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token nameValue;
    try {
      nameValue = jj_consume_token(MULTI_EX_AL_ST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    {if (true) return (nameValue.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public String parseTopicOccurenceResData() throws ParseException {
 /*@bgen(jjtree) parseTopicOccurenceResData */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCERESDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token nameValue;
    try {
      nameValue = jj_consume_token(MULTI_EX_AL_ST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    {if (true) return (nameValue.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* more unicorn (?) */
  @SuppressWarnings("unused")
static final public String parseTopicSubjLoc() throws ParseException {
 /*@bgen(jjtree) parseTopicSubjLoc */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICSUBJLOC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token nameValue;
    try {
      nameValue = jj_consume_token(MULTI_EX_AL_ST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    {if (true) return (nameValue.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unused")
static final public String parseTopicSubjIdentif() throws ParseException {
 /*@bgen(jjtree) parseTopicSubjIdentif */
 SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICSUBJIDENTIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token nameValue;
    try {
      nameValue = jj_consume_token(MULTI_EX_AL_ST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    {if (true) return (nameValue.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public XTMParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x5000,0x5000,0x5000,0x20700000,0x20700000,0x20700000,0x20700000,0x20700000,0x20700000,0x1000000,0xa000000,0xa000000,0xa000000,0x80000000,0x80000000,0x80000000,0x1000000,0x80000000,0x80000000,0x80000000,0x80000000,0x10000,0x10000,0x10000,0x1000000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x8,0x8,0x8,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x0,0x22,0x22,0x22,0x22,0x20,0x20,0x20,0x20,0x20,};
   }

  /** Constructor with InputStream. */
  public XTMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XTMParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XTMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    XTMParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public XTMParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XTMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    XTMParserTokenManager.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public XTMParser(XTMParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(XTMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = XTMParserTokenManager.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = XTMParserTokenManager.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = XTMParserTokenManager.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=XTMParserTokenManager.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
