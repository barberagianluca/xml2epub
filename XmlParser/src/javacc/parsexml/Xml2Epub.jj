/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Xml2Epub.jj */
/*@egen*//**
 * XTM Parser created with JavaCC 1.5.33, compatible with JavaCC 1.5.0+ Eclipse Plugins
 * Parser created by Gianluca Barbera and Marco Placidi
 * XTM files are XML files which start with
 * <?xml version="1.0" encoding="UTF-8"?><topicMap ...
 * PLEASE CHECK XTM COMPATIBILITY IN SPECIFIC VERSION TOKENS SECTION! 
 * Parser created to convert information fetched from an XTM file in an Epub file
 */
options
{
  static = true;
}

PARSER_BEGIN(XTMParser)
package javacc.parsexml;

import java.io.*;
import javacc.structure.*;

public class XTMParser/*@bgen(jjtree)*/implements XTMParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTXTMParserState jjtree = new JJTXTMParserState();

/*@egen*/
  private static boolean verboseParser; //verbose option on/off
  // Main used for parser debug purpose
  /** Use main only for debug
	* @param args arg[0] must contain full path of xtm file
	*/
  public static void main(String args []) throws Exception
  {
	//Debug - > Always verbose
	verboseParser = true;
    
	//FILE STREAM
	FileInputStream in = null;
	try {
	  //Need file to parse...
	  if(args.length<1) throw (new Exception("Full file path missing..."));
	  String fileName = args[0];

	  //Pre-process the input file
	  File processedFile = new File (fileName+"_reloaded.xtm");
	  String cmdLine = "native2ascii -encoding utf8 " + new File(fileName) + " " + processedFile;
	  Process jdkProc = null;
      try {
        jdkProc = Runtime.getRuntime().exec(cmdLine);
        jdkProc.waitFor();
	  } catch (InterruptedException ie) {
	    ie.printStackTrace();
	  }
	  System.out.println("File preprocessed.");

	  in = new FileInputStream(processedFile.getPath());
	  System.out.println("Now parsing " + fileName);
	  new XTMParser(in);

	  try {
		//START PARSING
		XTM xtm = XTMParser.start();
	      
		//Generate LOG
		xtm.print(fileName+"-LOG.txt");
	  } catch (Exception e) {
		System.out.println("Oops.");
		System.out.println(e.getMessage());
	  }

	} catch (Exception e) {
		System.out.println("Oops.");
		System.out.println(e.getMessage());
	} finally {
		if (in != null)
			in.close();
    }     
  }

  // Function for library purpose
  /** Parse an XTM File into an {@link XTM} object 
	* @param fullPathFileName Must contain full path of xtm file
	* @param verboseOption Set it to TRUE if you want to print actions
	*/
  public static XTM parse(String fullPathFileName, boolean verboseOption) throws Exception
  {
	if(verboseOption) verboseParser = true;	else verboseParser = false;
    
	FileInputStream in = null;
	XTM xtm = null;

	try {
	  //Need file to parse...
	  if(fullPathFileName==null || fullPathFileName.isEmpty()) throw (new Exception("Full file path missing..."));
	  String fileName = fullPathFileName;

	  File processedFile = new File (fileName+"_reloaded.xtm");
	  String cmdLine = "native2ascii -encoding utf8 " + new File(fileName) + " " + processedFile;
	  Process jdkProc = null;
      try {
        jdkProc = Runtime.getRuntime().exec(cmdLine);
        jdkProc.waitFor();
	  } catch (InterruptedException ie) {
	    ie.printStackTrace();
	  }
	  System.out.println("File preprocessed.");

	  //Load file
	  in = new FileInputStream(processedFile);
	  System.out.println("Now parsing " + fileName);
	  new XTMParser(in);

	  try {
		//START PARSING
		xtm = XTMParser.start();
	      
		//Generate LOG
		xtm.print(fileName+"-LOG.txt");

	  } catch (Exception e) {
		System.out.println("Oops.");
		System.out.println(e.getMessage());
	  }

	} catch (Exception e) {
		System.out.println("Oops.");
		System.out.println(e.getMessage());
	} finally {
		if (in != null)
			in.close();
    }

    //Return XTM Structure
	return xtm;     
  }
}
PARSER_END(XTMParser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
| "\r\n"
| < ("\r\n")* (" ")* "<!--" (~[ ">" ])* "-->" (" ")* ("\r\n")* > 	// Skip XTM (XML) Comments
} 


TOKEN :
{
/* COMMON USE TOKENS */
  < #LETTER: [ "A"-"Z", "a"-"z" ] >
| < #DIGIT: [ "0"-"9" ] >
| < #VALID_URL_SYMBOLS: [ "/", "-", ".", "_", "~", ":", "?", "#", "[", "]", "@", "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "=" ] >

/* SPECIFIC VERSION TOKENS */
| < FILE_START : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" >
| < START_TOPIC_MAP : "<topicMap xmlns=\"http://www.topicmaps.org/xtm/\" version=\"2.0\">" >

/* GENERAL XTM STRUCTURE TOKENS */
| < START_TOPIC: "<topic id=\"topic" >
| < END_TOPIC: "</topic>" >
| < START_ASSOCIATION: "<association>" >
| < END_ASSOCIATION: "</association>" >
| < START_ROLE: "<role>" >
| < END_ROLE: "</role>" >
| < TAG_END: "\"/>" >
| < END_TOPIC_MAP : "</topicMap>" >
| < START_SUBJECT_LOCATOR: "<subjectLocator href=\"" >
| < START_SUBJECT_IDENTIFIER: "<subjectIdentifier href=\"" >
| < START_INSTANCE_OF: "<instanceOf>" >
| < END_INSTANCE_OF: "</instanceOf>" >
| < START_TOPIC_REF: "<topicRef href=\"#topic" >
| < START_VARIANT: "<variant>" >
| < END_VARIANT: "</variant>" >
| < START_VALUE: "<value>" >
| < END_VALUE: "</value>" >
| < START_NAME: "<name>" >
| < END_NAME: "</name>" >
| < START_SCOPE: "<scope>" >
| < END_SCOPE: "</scope>" >
| < START_RESOURCE_DATA: "<resourceData>" >
| < END_RESOURCE_DATA: "</resourceData>" >
| < START_OCCURENCE: "<occurrence>" >
| < END_OCCURENCE: "</occurrence>" >
| < START_TYPE: "<type>" >
| < END_TYPE: "</type>" >

/* MULTI EXTENDED ALPHANUMERIC STRING TOKEN */
| < #EXTENDED_ALPHANUMERIC_STRING: (["\r", "\n", "\t"])* ( ["A"-"Z", "a"-"z", "0"-"9", "\\", "/", " ", "!", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", ":", ";", "=", ">", "?", "@", "[", "]", "^", "_", "`", "{", "|", "}", "~"] )+ (["\r", "\n", "\t"])* >
| < MULTI_EX_AL_ST: (< EXTENDED_ALPHANUMERIC_STRING >)+ >
}

/* PARSER START POINT */
XTM start():
{/*@bgen(jjtree) start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	XTM xtmFile; 
}
{/*@bgen(jjtree) start */
  try {
/*@egen*/
  < FILE_START > xtmFile = parseXTM()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    System.out.println("PARSING PROCESS OK");
    return xtmFile;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

XTM parseXTM():
{/*@bgen(jjtree) parseXTM */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSEXTM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
 	XTM x = new XTM(); 
	TopicMap tm = new TopicMap();
}
{/*@bgen(jjtree) parseXTM */
  try {
/*@egen*/
  < START_TOPIC_MAP > parseTopicMap(tm) < END_TOPIC_MAP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    x.setTopicMap(tm, false);
    return x;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
} 

void parseTopicMap(TopicMap topicMap):
{/*@bgen(jjtree) parseTopicMap */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICMAP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	TopicMap tm = topicMap;	
	Topic topic = new Topic();
	Association association = new Association();

	String topicId;
}
{/*@bgen(jjtree) parseTopicMap */
  try {
/*@egen*/
  < START_TOPIC > topicId = parseTopicID() "\">" parseTopic(topic) < END_TOPIC > [ parseTopicMap(tm) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    topic.setTopicID(topicId);
	tm.putTopic(topic);
  }
| < START_ASSOCIATION > parseAssociation(association) < END_ASSOCIATION > [ parseTopicMap(tm) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    tm.putAssociation(association);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 

/* TOKEN */

void parseTopic(Topic topic):
{/*@bgen(jjtree) parseTopic */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPIC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Topic t = topic;
	String subjectLocator;
	String subjectIdentifier;
}
{/*@bgen(jjtree) parseTopic */
  try {
/*@egen*/
  < START_SUBJECT_LOCATOR > subjectLocator = parseTopicSubjLoc() < TAG_END > [ parseTopic(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("TopicSubjLoc found");
	t.addTopicSubjectLocator(subjectLocator);
  }
| < START_SUBJECT_IDENTIFIER > subjectIdentifier = parseTopicSubjIdentif() < TAG_END > [ parseTopic(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("TopicSubjectIdentifier found");
	t.addTopicSubjectIdentifier(subjectIdentifier);
  }
| < START_INSTANCE_OF > parseTopicIstanceOf(t) < END_INSTANCE_OF > [ parseTopic(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	if(verboseParser) System.out.println("TopicIstanceOf found");
  }
| < START_NAME > parseTopicName(t) < END_NAME > [ parseTopic(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	//OK... passo topic, oggetto manipolato per riferimento
	if(verboseParser) System.out.println("TopicName found");
  }
| < START_OCCURENCE > parseTopicOccurence(t, null) < END_OCCURENCE > [ parseTopic(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("TopicOccurrence found");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/    
}

void parseTopicIstanceOf(Topic topic):
{/*@bgen(jjtree) parseTopicIstanceOf */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICISTANCEOF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Topic t = topic;
  String idTopicRefInstanceOf;
}
{/*@bgen(jjtree) parseTopicIstanceOf */
  try {
/*@egen*/
  < START_TOPIC_REF > idTopicRefInstanceOf = parseTopicID() < TAG_END > [ parseTopicIstanceOf(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("TopicIstanceOf found");
    t.addTopicInstanceOf(idTopicRefInstanceOf);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/   
}

void parseTopicName(Topic topic):
{/*@bgen(jjtree) parseTopicName */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Topic t = topic;
  TopicName tn = t.getTopicName();
  if(tn == null) {
	tn = t.getNewTopicName();
  }
  String topicNameValue;
}
{/*@bgen(jjtree) parseTopicName */
  try {
/*@egen*/
  < START_VALUE > topicNameValue = parseNameValue() < END_VALUE > [ parseTopicName(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    if(verboseParser) System.out.println("TopicNameValue found");
    tn.setTopicNameValue(topicNameValue);
  }
| < START_VARIANT > parseNameVariant(t, null) < END_VARIANT > [ parseTopicName(t) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	if(verboseParser) System.out.println("TopicNameVariant found");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void parseNameVariant(Topic topic, TopicNameVariant tnv):
{/*@bgen(jjtree) parseNameVariant */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSENAMEVARIANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Topic t = topic;
  TopicNameVariant topicNameVariant = tnv;
  if(topicNameVariant == null) {
    topicNameVariant = t.getNewTopicNameVariant(); //ritorna il riferimento
  }
  String resourceData;
}
{/*@bgen(jjtree) parseNameVariant */
  try {
/*@egen*/
  < START_SCOPE > parseTopicNameVariantScope(topicNameVariant) < END_SCOPE > [ parseNameVariant(t, topicNameVariant)]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	//ok
  }
| < START_RESOURCE_DATA > resourceData = parseTopicNameVariantResData() < END_RESOURCE_DATA > [ parseNameVariant(t, topicNameVariant)]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	topicNameVariant.setTopicNameVariantResourceData(resourceData);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void parseTopicNameVariantScope(TopicNameVariant tnv):
{/*@bgen(jjtree) parseTopicNameVariantScope */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICNAMEVARIANTSCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  TopicNameVariant topicNameVariant = tnv;
  String idTopicNameVariantScope;
}
{/*@bgen(jjtree) parseTopicNameVariantScope */
  try {
/*@egen*/
  < START_TOPIC_REF > idTopicNameVariantScope = parseTopicID() < TAG_END > [ parseTopicNameVariantScope(topicNameVariant) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    topicNameVariant.addTopicNameVariantScope(idTopicNameVariantScope);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/   
}

void parseTopicOccurence(Topic t, TopicOccurrence to):
{/*@bgen(jjtree) parseTopicOccurence */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Topic topic = t;
  TopicOccurrence topicOccurence = to;
  if(topicOccurence == null) { 
  	topicOccurence = t.getNewTopicOccurence(); //ritorna il riferimento al nuovo topic occurence in topic
  }
  String topicType;
  String topicOccurenceScope;
  String topicOccurenceResData;
}
{/*@bgen(jjtree) parseTopicOccurence */
  try {
/*@egen*/
  < START_TYPE > topicType = parseTopicOccurenceType() < END_TYPE > [   parseTopicOccurence(topic, topicOccurence) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("TopicOccurenceType found");
    topicOccurence.setTopicOccurenceType(topicType);
  }
| < START_SCOPE > topicOccurenceScope = parseTopicOccurenceScope() < END_SCOPE > [   parseTopicOccurence(topic, topicOccurence) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("TopicOccurenceScope found");
    topicOccurence.addTopicOccurenceScope(topicOccurenceScope);
  }
| < START_RESOURCE_DATA > topicOccurenceResData = parseTopicOccurenceResData() < END_RESOURCE_DATA > [   parseTopicOccurence(topic, topicOccurence) ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("TopicOccurenceResData found");
	topicOccurence.setTopicOccurenceResourceData(topicOccurenceResData);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

String parseTopicOccurenceType():
{/*@bgen(jjtree) parseTopicOccurenceType */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String idTopicRefOccurenceType;
}
{/*@bgen(jjtree) parseTopicOccurenceType */
  try {
/*@egen*/
  < START_TOPIC_REF > idTopicRefOccurenceType = parseTopicID() < TAG_END >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return idTopicRefOccurenceType;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

String parseTopicOccurenceScope():
{/*@bgen(jjtree) parseTopicOccurenceScope */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCESCOPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String idTopicRefOccurenceScope;
}
{/*@bgen(jjtree) parseTopicOccurenceScope */
  try {
/*@egen*/
  < START_TOPIC_REF > idTopicRefOccurenceScope = parseTopicID() < TAG_END >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	return idTopicRefOccurenceScope;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

/* ASSOCIATION */
void parseAssociation(Association a):
{/*@bgen(jjtree) parseAssociation */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Association association = a;
	AssociationRole associationRole = new AssociationRole();
}
{/*@bgen(jjtree) parseAssociation */
  try {
/*@egen*/
  < START_TYPE > parseAssociationType(association) < END_TYPE > [parseAssociation(association)]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	//ok
  }
| < START_ROLE > parseAssociationRole(associationRole) < END_ROLE > [parseAssociation(association)]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {  
	association.addAssociationRole(associationRole);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void parseAssociationType(Association a):
{/*@bgen(jjtree) parseAssociationType */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Association association = a;
  String idAssociationType; 
}
{/*@bgen(jjtree) parseAssociationType */
  try {
/*@egen*/
  < START_TOPIC_REF > idAssociationType = parseTopicID() < TAG_END >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("AssociationType found");
    association.setAssociationType(idAssociationType);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/   
}

void parseAssociationRole(AssociationRole as):
{/*@bgen(jjtree) parseAssociationRole */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATIONROLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  AssociationRole associationRole = as;
  String idAssociationRoleTopicRef;
}
{/*@bgen(jjtree) parseAssociationRole */
  try {
/*@egen*/
  < START_TYPE > parseAssociationRoleType(associationRole) < END_TYPE > [parseAssociationRole(associationRole)]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	//ok
  }
| < START_TOPIC_REF > idAssociationRoleTopicRef = parseTopicID() < TAG_END >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("AssociationRoleTopicRef found");
	associationRole.setAssociationRoleTopicRef(idAssociationRoleTopicRef);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void parseAssociationRoleType(AssociationRole as):
{/*@bgen(jjtree) parseAssociationRoleType */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSEASSOCIATIONROLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  AssociationRole associationRole = as;
  String idAssociationRoleType; 
}
{/*@bgen(jjtree) parseAssociationRoleType */
  try {
/*@egen*/
  < START_TOPIC_REF > idAssociationRoleType = parseTopicID() < TAG_END >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("AssociationRole found");
    associationRole.setAssociationRoleType(idAssociationRoleType);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/   
}

/* FOGLIE */
String parseTopicID():
{/*@bgen(jjtree) parseTopicID */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token topicID;
}
{/*@bgen(jjtree) parseTopicID */
  try {
/*@egen*/
  topicID = < MULTI_EX_AL_ST >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println("Found topic id = " + topicID.image);
    return (topicID.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String parseNameValue():
{/*@bgen(jjtree) parseNameValue */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSENAMEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token nameValue;
}
{/*@bgen(jjtree) parseNameValue */
  try {
/*@egen*/
  nameValue = < MULTI_EX_AL_ST >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(verboseParser) System.out.println(" Found name value = " + nameValue.image );
    return (nameValue.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String parseTopicNameVariantResData():
{/*@bgen(jjtree) parseTopicNameVariantResData */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICNAMEVARIANTRESDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token nameValue;
}
{/*@bgen(jjtree) parseTopicNameVariantResData */
  try {
/*@egen*/
  nameValue = < MULTI_EX_AL_ST >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ /* unicorn included */
  {
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    return (nameValue.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String parseTopicOccurenceResData():
{/*@bgen(jjtree) parseTopicOccurenceResData */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICOCCURENCERESDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token nameValue; 
}
{/*@bgen(jjtree) parseTopicOccurenceResData */
  try {
/*@egen*/
  nameValue = < MULTI_EX_AL_ST >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ /* unicorn included */
  {
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    return (nameValue.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/* more unicorn (?) */
String parseTopicSubjLoc():
{/*@bgen(jjtree) parseTopicSubjLoc */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICSUBJLOC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token nameValue; 
}
{/*@bgen(jjtree) parseTopicSubjLoc */
  try {
/*@egen*/
  nameValue = < MULTI_EX_AL_ST >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ /* unicorn  included */
  {
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    return (nameValue.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String parseTopicSubjIdentif():
{/*@bgen(jjtree) parseTopicSubjIdentif */
 SimpleNode jjtn000 = new SimpleNode(JJTPARSETOPICSUBJIDENTIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token nameValue; 
}
{/*@bgen(jjtree) parseTopicSubjIdentif */
  try {
/*@egen*/
  nameValue = < MULTI_EX_AL_ST >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ /* unicorn  included */
  {
    if(verboseParser) System.out.println(" Found resource data = " + nameValue.image );
    return (nameValue.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
